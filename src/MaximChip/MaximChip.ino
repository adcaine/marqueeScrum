/**
Hookup guide to 5x7 LED matrix and arduino

Chip Pin    Corresponding 5x7 LED PIN or Arduino PIN  (5x7 unles otherwise stated)
1           Arduino Data Pin 2
2           13
3           6
4           GND
5           n/c
6           11 or 4
7           10
8           n/c
9           GND
10          n/c
11          3
12          Arduino Latch Pin 4

13          Arduino Lock Pin 3
14          14
15          2
16          8
17          n/c
18          5V through via 22K resister
19          5V
20          5 or 12
21          7
22          9
23          1
24          n/c
**/

#define DATA_PIN 2
#define LATCH_PIN 3
#define CLOCK_PIN 4

#define DECODE_MODE 0x09
#define INTENSITY_REGISTER 0x0A
#define SCAN_LIMIT 0x0B
#define SHUTDOWN_MODE 0x0C
#define TEST_MODE 0x0F


#define NUM_COLS 5


byte font_5x7[96][5] = {
        {0x00,0x00,0x00,0x00,0x00}, // blank
        {0x00,0x00,0xfa,0x00,0x00}, // !
        {0x00,0xe0,0x00,0xe0,0x00}, // "
        {0x28,0xfe,0x28,0xfe,0x28}, // #
        {0x24,0x54,0xfe,0x54,0x48}, // $
        {0xc4,0xc8,0x10,0x26,0x46}, // %
        {0x6c,0x92,0xaa,0x44,0x0a}, // &
        {0x00,0xa0,0xc0,0x00,0x00}, // '
        {0x00,0x38,0x44,0x82,0x00}, // (
        {0x00,0x82,0x44,0x38,0x00}, // )
        {0x10,0x54,0x38,0x54,0x10}, // *
        {0x10,0x10,0x7c,0x10,0x10}, // +
        {0x00,0x0a,0x0c,0x00,0x00}, // ,
        {0x10,0x10,0x10,0x10,0x10}, // -
        {0x00,0x06,0x06,0x00,0x00}, // .
        {0x04,0x08,0x10,0x20,0x40}, // /
        {0x7c,0x8a,0x92,0xa2,0x7c}, // 0
        {0x00,0x42,0xfe,0x02,0x00}, // 1
        {0x42,0x86,0x8a,0x92,0x62}, // 2
        {0x84,0x82,0xa2,0xd2,0x8c}, // 3
        {0x18,0x28,0x48,0xfe,0x08}, // 4
        {0xe4,0xa2,0xa2,0xa2,0x9c}, // 5
        {0x3c,0x52,0x92,0x92,0x0c}, // 6
        {0x80,0x8e,0x90,0xa0,0xc0}, // 7
        {0x6c,0x92,0x92,0x92,0x6c}, // 8
        {0x60,0x92,0x92,0x94,0x78}, // 9
        {0x00,0x6c,0x6c,0x00,0x00}, // :
        {0x00,0x6a,0x6c,0x00,0x00}, // ;
        {0x00,0x10,0x28,0x44,0x82}, // <
        {0x28,0x28,0x28,0x28,0x28}, // =
        {0x82,0x44,0x28,0x10,0x00}, // >
        {0x40,0x80,0x8a,0x90,0x60}, // ?
        {0x4c,0x92,0x9e,0x82,0x7c}, // @
        {0x7e,0x88,0x88,0x88,0x7e}, // A
        {0xfe,0x92,0x92,0x92,0x6c}, // B
        {0x7c,0x82,0x82,0x82,0x44}, // C
        {0xfe,0x82,0x82,0x44,0x38}, // D
        {0xfe,0x92,0x92,0x92,0x82}, // E
        {0xfe,0x90,0x90,0x80,0x80}, // F
        {0x7c,0x82,0x82,0x8a,0x4c}, // G
        {0xfe,0x10,0x10,0x10,0xfe}, // H
        {0x00,0x82,0xfe,0x82,0x00}, // I
        {0x04,0x02,0x82,0xfc,0x80}, // J
        {0xfe,0x10,0x28,0x44,0x82}, // K
        {0xfe,0x02,0x02,0x02,0x02}, // L
        {0xfe,0x40,0x20,0x40,0xfe}, // M
        {0xfe,0x20,0x10,0x08,0xfe}, // N
        {0x7c,0x82,0x82,0x82,0x7c}, // O
        {0xfe,0x90,0x90,0x90,0x60}, // P
        {0x7c,0x82,0x8a,0x84,0x7a}, // Q
        {0xfe,0x90,0x98,0x94,0x62}, // R
        {0x62,0x92,0x92,0x92,0x8c}, // S
        {0x80,0x80,0xfe,0x80,0x80}, // T
        {0xfc,0x02,0x02,0x02,0xfc}, // U
        {0xf8,0x04,0x02,0x04,0xf8}, // V
        {0xfe,0x04,0x18,0x04,0xfe}, // W
        {0xc6,0x28,0x10,0x28,0xc6}, // X
        {0xc0,0x20,0x1e,0x20,0xc0}, // Y
        {0x86,0x8a,0x92,0xa2,0xc2}, // Z
        {0x00,0x00,0xfe,0x82,0x82}, // [
        {0x40,0x20,0x10,0x08,0x04}, // "\"
        {0x82,0x82,0xfe,0x00,0x00}, // ]
        {0x20,0x40,0x80,0x40,0x20}, // ^
        {0x02,0x02,0x02,0x02,0x02}, // _
        {0x00,0x80,0x40,0x20,0x00}, // `
        {0x04,0x2a,0x2a,0x2a,0x1e}, // a
        {0xfe,0x12,0x22,0x22,0x1c}, // b
        {0x1c,0x22,0x22,0x22,0x04}, // c
        {0x1c,0x22,0x22,0x12,0xfe}, // d
        {0x1c,0x2a,0x2a,0x2a,0x18}, // e
        {0x10,0x7e,0x90,0x80,0x40}, // f
        {0x10,0x28,0x2a,0x2a,0x3c}, // g
        {0xfe,0x10,0x20,0x20,0x1e}, // h
        {0x00,0x22,0xbe,0x02,0x00}, // i
        {0x04,0x02,0x22,0xbc,0x00}, // j
        {0x00,0xfe,0x08,0x14,0x22}, // k
        {0x00,0x82,0xfe,0x02,0x00}, // l
        {0x3e,0x20,0x18,0x20,0x1e}, // m
        {0x3e,0x10,0x20,0x20,0x1e}, // n
        {0x1c,0x22,0x22,0x22,0x1c}, // o
        {0x3e,0x28,0x28,0x28,0x10}, // p
        {0x10,0x28,0x28,0x18,0x3e}, // q
        {0x3e,0x10,0x20,0x20,0x10}, // r
        {0x12,0x2a,0x2a,0x2a,0x04}, // s
        {0x20,0xfc,0x22,0x02,0x04}, // t
        {0x3c,0x02,0x02,0x04,0x3e}, // u
        {0x38,0x04,0x02,0x04,0x38}, // v
        {0x3c,0x02,0x0c,0x02,0x3c}, // w
        {0x22,0x14,0x08,0x14,0x22}, // x
        {0x30,0x0a,0x0a,0x0a,0x3c}, // y
        {0x22,0x26,0x2a,0x32,0x22}, // z
        {0x00,0x10,0x6c,0x82,0x00}, // {
        {0x00,0x00,0xfe,0x00,0x00}, // |
        {0x00,0x82,0x6c,0x10,0x00}, // }
        {0x40,0x80,0xc0,0x40,0x80}, // ~
        {0x00,0x00,0x00,0x00,0x00}, //
};

void showCharacter(int character, int offest = 0);

void setup(){
  pinMode(DATA_PIN, OUTPUT);
  pinMode(CLOCK_PIN, OUTPUT);
  pinMode(LATCH_PIN, OUTPUT);
  digitalWrite(DATA_PIN, LOW);
  digitalWrite(CLOCK_PIN, LOW);
  digitalWrite(LATCH_PIN, LOW);
  setScanLimit(0x07);
  enableDecodeMode(false);
  enableNormalMode(true);
  enableTestMode(false);
  clearColumnRegisters();
  setIntensity(0x0A);
}

String message = "Time's up!  ";

void loop(){
  
  //printAMessage();
  //slide();
  printSlidingMessage();
}

void slide(){
  for(int i = 0; i < 90; i++){
    for(int offset = 0; offset < 5; offset++){
      showCharacter(i, offset);
      delay(50);
    }
  }
}

void printAMessage(){

  for(int i = 0; i < message.length(); i++){
    showCharacter(((byte)message[i]) - 32);
    delay(500);
    showCharacter(0);
    delay(200);
  }
  showCharacter(0);
  delay(500);

}

void printSlidingMessage(){
  byte frame[10];
  unsigned int currentCharacter = 0;
  unsigned int bufferStartingColumn = 0;
  for(unsigned int j = 0; j < 10; j++){
    frame[j] = 0x00;
  }
  showFrame(frame, bufferStartingColumn);
  while(true){
    for(unsigned int j = 0; j < NUM_COLS; j++){
      frame[bufferStartingColumn] = font_5x7[message[currentCharacter] - 32][j];
      bufferStartingColumn = ++bufferStartingColumn % 10;
      showFrame(frame, bufferStartingColumn);
      delay(50);
    }
  frame[bufferStartingColumn] = 0x00;
  bufferStartingColumn = ++bufferStartingColumn % 10;
  showFrame(frame, bufferStartingColumn);
  currentCharacter = (++currentCharacter) % message.length();
  } 
}


void shift16(byte opCode, byte data, boolean latch){
  digitalWrite(LATCH_PIN, LOW);
  shiftOut(DATA_PIN, CLOCK_PIN, MSBFIRST, opCode);
  shiftOut(DATA_PIN, CLOCK_PIN, MSBFIRST, data);
  if(latch){
    digitalWrite(LATCH_PIN, LOW);
    digitalWrite(LATCH_PIN, HIGH);
  }
}

void enableDecodeMode(boolean isDecodeMode){
  shift16(DECODE_MODE, isDecodeMode ? 0xFF : 0x00, false);
  shift16(DECODE_MODE, isDecodeMode ? 0xFF : 0x00, true);
}

void setScanLimit(byte limit){
  shift16(SCAN_LIMIT, limit, false);
  shift16(SCAN_LIMIT, limit, true);
}

void enableNormalMode(boolean isNormal){
  shift16(SHUTDOWN_MODE, isNormal ? 0x01 : 0x00, false);
  shift16(SHUTDOWN_MODE, isNormal ? 0x01 : 0x00, true);
}

void setIntensity(byte intensityValue){
  shift16(INTENSITY_REGISTER, intensityValue, false);
  shift16(INTENSITY_REGISTER, intensityValue, true);
}

void enableTestMode(boolean isTest){
  shift16(TEST_MODE, isTest ? 0x01 : 0x00, false);
  shift16(TEST_MODE, isTest ? 0x01 : 0x00, true);
}

void clearColumnRegisters(){
  for(byte col = 0x01; col < 0x09; col++){
    shift16(col, 0x00, false);
    shift16(col, 0x00, true);
  }
}

void showCharacter(int character, int offset){
  for(byte i=0; i < NUM_COLS; i++){
    shift16(i + 1, font_5x7[character][i + offset], true);
  }
}

void showFrame(byte cArray[], int startingColumn){
  unsigned int displayColumn = startingColumn;
  for(byte i=0; i < NUM_COLS; i++){
    shift16(i + 1, cArray[(displayColumn + 5) % 10], false);
    shift16(i + 1, cArray[(displayColumn) % 10], true);
    displayColumn = ++displayColumn % 10;
  }
}


